/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define DEF 0           // QWERTY
#define COL 1           // Colemak-DH
#define NUM 2           // liczby
#define NAV 3           // nawigacja
#define CONF 4          // konfiguracja (np. Bluetooth)

#define LGS(KEY) LG(LS(KEY))
#define LSA(KEY) LS(LA(KEY))
#define LSC(KEY) LS(LC(KEY))
#define LCA(KEY) LC(LA(KEY))
#define LSCA(KEY) LS(LC(LA(KEY)))

#define SNIP LGS(S)     // wykonuje zrzut ekranu za pomocą narzędzia SNIP (Win+Shift+S)

&mt {
    flavor = "tap-preferred";
    tapping-term-ms = <200>;
    quick-tap-ms = <150>;
    require-prior-idle-ms = <100>;
};

&lt {
    flavor = "tap-preferred";
    tapping-term-ms = <200>;
    quick-tap-ms = <150>;
    require-prior-idle-ms = <100>;
};

&caps_word {
    continue-list = <UNDER N1 N2 N3 N4 N5 N6 N7 N8 N9 N0 BSPC DEL>;
};

/ {
    keymap {
        compatible = "zmk,keymap";

            //  |       0       |       1       |       2       |       3       |       4       |       |       5       |       6       |       7       |       8       |       9       |
       DEF_layer {
            bindings = <
                &lt CONF Q      &kp W           &kp E           &kp R           &kp T                   &kp Y           &kp U           &kp I           &kp O           &kp P
                &kp A           &hm LALT S      &hm LCTRL D     &hm LSHFT F     &kp G                   &kp H           &hm RSHFT J     &hm RCTRL K     &hm LALT L      &kp SEMI
                &kp Z           &kp X           &kp C           &kp V           &kp B                   &kp N           &kp M           &kp COMMA       &kp DOT         &kp SLASH
                                                                &mt LWIN ESC    &lt NUM TAB             &lt NAV SPACE   &mt RALT ENTER
            >;
        };

        COL_layer {
            bindings = <
                &lt CONF Q      &kp W           &kp F           &kp P           &kp B                   &kp J           &kp L           &kp U           &kp Y           &kp SEMI
                &kp A           &hm LALT R      &hm LCTRL S     &hm LSHFT T     &kp G                   &kp M           &hm RSHFT N     &hm RCTRL E     &hm LALT I      &kp O
                &kp Z           &kp X           &kp C           &kp D           &kp V                   &kp K           &kp H           &kp COMMA       &kp DOT         &kp SLASH
                                                                &mt LWIN ESC    &lt NUM TAB             &lt NAV SPACE   &mt RALT ENTER
            >;
        };

        NUM_layer {
            bindings = <
                &none           &kp F7          &kp F8          &kp F9          &none                   &none           &kp N7          &kp N8          &kp N9          &none
                &none           &hm LALT F4     &hm LCTRL F5    &hm LSHFT F6    &none                   &mt DOT COMMA   &hm RSHFT N4    &hm RCTRL N5    &hm LALT N6     &kp N0
                &none           &kp F1          &kp F2          &kp F3          &none                   &none           &kp N1          &kp N2          &kp N3          &none
                                                                &mt LWIN ESC    &trans                  &lt NAV SPACE   &mt RALT ENTER
            >;
        };

        NAV_layer {
            bindings = <
                &zoom LG(ESC) 0 &none           &none           &mt PSCRN SNIP  &none                   &none           &none           &none           &none           &none
                &kp LC(Z)       &kp LALT        &kp LCTRL       &kp LSHFT       &none                   &prev           &kp LEFT        &kp UP          &kp RIGHT       &next
                &none           &kp LC(X)       &kp LC(C)       &kp LC(V)       &none                   &none           &kp HOME        &kp DOWN        &kp END         &none
                                                                &mt LWIN ESC    &kp TAB                 &trans          &mt RALT ENTER
            >;
        };

        // TOOL_layer {
        //     bindings = <
        //         &none           &none           &none           &none           &none                   &none           &none           &none           &none           &none
        //         &none           &none           &none           &none           &none                   &none           &none           &none           &none           &none
        //         &none           &none           &none           &none           &none                   &none           &none           &none           &none           &none
        //                                                         &none           &trans                  &trans          &none
        //     >;
        // };

        CONF_layer {
            bindings = <
                &trans          &bt BT_SEL 0    &bt BT_SEL 1    &bt BT_SEL 2    &bootloader             &none           &none           &none           &none           &none
                &bt BT_CLR      &bt BT_SEL 3    &bt BT_SEL 4    &bt BT_SEL 5    &sys_reset              &none           &none           &none           &none           &none
                &none           &none           &none           &none           &none                   &none           &none           &none           &none           &none
                                                                &out OUT_TOG    &tog COL                &none           &none
            >;
        };
    };


    /*                KEY POSITIONS
    ╭────────────────────╮ ╭────────────────────╮
    │  0   1   2   3   4 │ │  5   6   7   8   9 │
    │ 10  11  12  13  14 │ │ 15  16  17  18  19 │
    │ 20  21  22  23  24 │ │ 25  26  27  28  29 │
    ╰───────────╮ 30  31 │ │ 32  33 ╭───────────╯
                ╰────────╯ ╰────────╯         */
    #define SHORT timeout-ms = <50>
    #define LONG timeout-ms = <200>

    combos {
        compatible = "zmk,combos";

        // CAPS-WORD
        caps    {key-positions = <13 16>; bindings = <&caps_word>; layers = <DEF COL>; SHORT;};                 // CAPS WORD

        // TAB, ESC, BACKSPACE i DELETE
        // esc     {key-positions = <2 3>; bindings = <&kp ESC>; layers = <DEF COL NUM>; SHORT;};                  // ESC
        tab     {key-positions = <12 13>; bindings = <&kp TAB>; layers = <DEF COL NUM>; SHORT;};                // TAB
        // del     {key-positions = <6 7>; bindings = <&kp DEL>; layers = <DEF COL NUM NAV>; SHORT;};              // DEL
        bsdl    {key-positions = <16 17>; bindings = <&bsdl>; layers = <DEF COL NUM NAV>; SHORT;};              // BSPC lub DEL (jeśli wciśnięto SHIFT)

        // nawiasy
        // lpar    {key-positions = <6 16>; bindings = <&lpb>; layers = <DEF COL>; SHORT;};                        // ( [{
        // rpar    {key-positions = <7 17>; bindings = <&rpb>; layers = <DEF COL>; SHORT;};                        // ) ]}
        lpar    {key-positions = <16 26>; bindings = <&kp LPAR>; layers = <DEF COL>; SHORT;};                        // ( [{
        rpar    {key-positions = <17 27>; bindings = <&kp RPAR>; layers = <DEF COL>; SHORT;};                        // ) ]}
        lbkt    {key-positions = <6 16>; bindings = <&kp LBKT>; layers = <DEF COL>; SHORT;};                        // ( [{
        rbkt    {key-positions = <7 17>; bindings = <&kp RBKT>; layers = <DEF COL>; SHORT;};                        // ) ]}
        lbrc    {key-positions = <12 22>; bindings = <&kp LBRC>; layers = <DEF COL>; SHORT;};                        // ( [{
        rbrc    {key-positions = <13 23>; bindings = <&kp RBRC>; layers = <DEF COL>; SHORT;};                        // ) ]}

        // symbole matematyczne: +, -, *, /
        slash   {key-positions = <13 14>; bindings = <&kp SLASH>; layers = <DEF COL>; SHORT;};                  // /
        star    {key-positions = <15 16>; bindings = <&kp STAR>; layers = <DEF COL>; SHORT;};                   // *
        minus   {key-positions = <23 24>; bindings = <&kp MINUS>; layers = <DEF COL>; SHORT;};                  // -
        plus    {key-positions = <25 26>; bindings = <&kp PLUS>; layers = <DEF COL>; SHORT;};                   // +

        // pozostałe symbole
        excl    {key-positions = <0 10>; bindings = <&kp EXCL>; layers = <DEF COL>; SHORT;};                    // !
        at      {key-positions = <1 11>; bindings = <&kp AT>; layers = <DEF COL>; SHORT;};                      // @
        hash    {key-positions = <2 12>; bindings = <&kp HASH>; layers = <DEF COL>; SHORT;};                    // #
        dllr    {key-positions = <3 13>; bindings = <&kp DLLR>; layers = <DEF COL>; SHORT;};                    // $
        prcnt   {key-positions = <4 14>; bindings = <&kp PRCNT>; layers = <DEF COL>; SHORT;};                   // %

        // equal   {key-positions = <12 22>; bindings = <&kp EQUAL>; layers = <DEF COL>; SHORT;};                  // =+
        equal   {key-positions = <11 21>; bindings = <&kp EQUAL>; layers = <DEF COL>; SHORT;};                  // =+
        under   {key-positions = <22 23>; bindings = <&kp UNDER>; layers = <DEF COL>; SHORT;};                  // _

        caret   {key-positions = <5 15>; bindings = <&kp CARET>; layers = <DEF COL>; SHORT;};                   // ^
        amps    {key-positions = <8 18>; bindings = <&kp AMPS>; layers = <DEF COL>; SHORT;};                    // &
        quot    {key-positions = <9 19>; bindings = <&kp QMARK>; layers = <DEF COL>; SHORT;};                   // ?

        // colon   {key-positions = <17 27>; bindings = <&kp COLON>; layers = <DEF COL>; SHORT;};                  // :
        colon   {key-positions = <18 28>; bindings = <&kp COLON>; layers = <DEF COL>; SHORT;};                  // :
        bslh    {key-positions = <26 27>; bindings = <&kp BSLH>; layers = <DEF COL>; SHORT;};                   // \|

        // odwrotny (GRAVE) oraz zwykły (APOS) apostrof oraz tylda (TILDA) i cudzysłów ("): `, ', ~, "
        grave   {key-positions = <14 24>; bindings = <&kp GRAVE>; layers = <DEF COL>; SHORT;};                  // `~
        sqt     {key-positions = <15 25>; bindings = <&kp APOS>; layers = <DEF COL>; SHORT;};                   // '"

        // klawiatura numeryczna
        na      {key-positions = <16 26>; bindings = <&kp A>; layers = <NUM>; SHORT;};                          // A
        nb      {key-positions = <17 27>; bindings = <&kp B>; layers = <NUM>; SHORT;};                          // B
        nc      {key-positions = <18 28>; bindings = <&kp C>; layers = <NUM>; SHORT;};                          // C
        nd      {key-positions = <6 16>; bindings = <&kp D>; layers = <NUM>; SHORT;};                           // D
        ne      {key-positions = <7 17>; bindings = <&kp E>; layers = <NUM>; SHORT;};                           // E
        nf      {key-positions = <8 18>; bindings = <&kp F>; layers = <NUM>; SHORT;};                           // F
        ndot    {key-positions = <26 27>; bindings = <&kp DOT>; layers = <NUM>; SHORT;};                        // .

        // klawisze funkcyjne
        f10     {key-positions = <11 21>; bindings = <&kp F10>; layers = <NUM>; SHORT;};                        // F10
        f11     {key-positions = <12 22>; bindings = <&kp F11>; layers = <NUM>; SHORT;};                        // F11
        f12     {key-positions = <13 23>; bindings = <&kp F12>; layers = <NUM>; SHORT;};                        // F12

        // page up i page down w warstwie NAV
        pgup    {key-positions = <16 26>; bindings = <&kp PG_UP>; layers = <NAV>; LONG;};                       // PAGE UP
        pgdn    {key-positions = <18 28>; bindings = <&kp PG_DN>; layers = <NAV>; LONG;};                       // PAGE DOWN
    };

    behaviors {
        prev: prev_app_or_desktop {
            compatible = "zmk,behavior-mod-morph";
            label = "PREV_APP_OR_VDESK_OR_CLOSE_VDESK_ON_HOLD";
            #binding-cells = <0>;
            bindings = <&mt LG(LC(F4)) LG(LC(LEFT))>, <&kp LS(TAB)>;
            mods = <(MOD_LALT)>;
            keep-mods = <(MOD_LALT)>;
        };

        next: next_app_or_desktop {
            compatible = "zmk,behavior-mod-morph";
            label = "NEXT_APP_OR_VDESK_OR_NEW_VDESK_ON_HOLD";
            #binding-cells = <0>;
            bindings = <&mt LG(LC(D)) LG(LC(RIGHT))>, <&kp TAB>;
            mods = <(MOD_LALT)>;
            keep-mods = <(MOD_LALT)>;
        };

        zoom_in_out: windows_magnifier {
            compatible = "zmk,behavior-mod-morph";
            label = "ZOOM_IN_OUT";
            #binding-cells = <0>;
            bindings = <&kp LG(EQUAL)>, <&kp LG(MINUS)>;
            mods = <(MOD_LSFT | MOD_LCTL)>;
        };

        zoom: zoom {
            compatible = "zmk,behavior-hold-tap";
            label = "ZOOM";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <100>;
            bindings = <&kp>, <&zoom_in_out>;
        };

        lbk: lbkt_lbrc {
            compatible = "zmk,behavior-mod-morph";
            label = "LEFT_BRACKET_BRACE";
            #binding-cells = <0>;
            bindings = <&kp LBKT>, <&kp LBRC>;
            mods = <(MOD_LCTL)>;
        };

        rbk: rbkt_rbrc {
            compatible = "zmk,behavior-mod-morph";
            label = "RIGHT_BRACKET_BRACE";
            #binding-cells = <0>;
            bindings = <&kp RBKT>, <&kp RBRC>;
            mods = <(MOD_LCTL)>;
        };

        lpb: lpar_rbkt {
            compatible = "zmk,behavior-mod-morph";
            label = "LEFT_PARENTHESIS_BRACKET_BRACE";
            #binding-cells = <0>;
            bindings = <&kp LPAR>, <&lbk>;
            mods = <(MOD_LSFT)>;
        };

        rpb: rpar_rbkt {
            compatible = "zmk,behavior-mod-morph";
            label = "RIGHT_PARENTHESIS_BRACKET_BRACE";
            #binding-cells = <0>;
            bindings = <&kp RPAR>, <&rbk>;
            mods = <(MOD_LSFT)>;
        };

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <100>;
            bindings = <&kp>, <&kp>;
        };

        bsdl: bspc_del {
            compatible = "zmk,behavior-mod-morph";
            label = "BACKSPACE_DELETE";
            #binding-cells = <0>;
            bindings = <&kp BSPC>, <&kp DEL>;
            mods = <(MOD_LSFT)>;
        };
   };

    macros {
        // dm: delphi_macro {
        //     #binding-cells = <1>;
        //     label = "DELPHI_MACRO";
        //     compatible = "zmk,behavior-macro-one-param";
        //     bindings =
        //         <&macro_press &kp LSHFT &kp LCTRL>,
        //         <&macro_tap &kp K>,
        //         <&macro_param_1to1 &kp MACRO_PLACEHOLDER>,
        //         <&macro_release &kp LSHFT &kp LCTRL>;
        // };
    };

    // conditional_layers {
    //     compatible = "zmk,conditional-layers";
    //     tri_layer {
    //         if-layers = <NUM NAV>;
    //         then-layer = <TOOL>;
    //     };
    // };
};