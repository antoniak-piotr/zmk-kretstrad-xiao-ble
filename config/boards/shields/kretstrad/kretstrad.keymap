#include <behaviors.dtsi>
#include <behaviors/num_word.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define DEF 0           // QWERTY
#define COL 1           // Colemak-DH
#define NUM 2           // liczby
#define FUN 3           // klawisze funkcyjne
#define NAV 4           // nawigacja
#define CONF 5          // konfiguracja (np. Bluetooth)

#define LSHF LSHFT
#define LCTR LCTRL
#define RSHF RSHFT
#define RCTR RCTRL

#define SG(KEY) LS(LG(KEY))
#define SA(KEY) LS(LA(KEY))
#define SC(KEY) LS(LC(KEY))
#define CA(KEY) LC(LA(KEY))
#define SCA(KEY) LS(LC(LA(KEY)))
#define GC(KEY) LG(LC(KEY))

#define SNIP SG(S)                  // wykonuje zrzut ekranu za pomocą narzędzia SNIP (Win+Shift+S)
#define DESK GC(F4)                 // zamyka pulpit wirtualny

&mt {
    // flavor = "tap-preferred";
    tapping-term-ms = <200>;
    // quick-tap-ms = <150>;
    // require-prior-idle-ms = <100>;
};

&lt {
    // flavor = "tap-preferred";
    tapping-term-ms = <200>;
    quick-tap-ms = <150>;
    // require-prior-idle-ms = <100>;
};

&sl {  // sticky-layer config
    ignore-modifiers;          // allow chording sticky mods & layers
};

&caps_word {
    continue-list = <UNDER N1 N2 N3 N4 N5 N6 N7 N8 N9 N0 BSPC DEL>;
};

&num_word {
    layers = <NUM>;
};

/ {
    keymap {
        compatible = "zmk,keymap";

            //  |       0       |       1       |       2       |       3       |       4       |       |       5       |       6       |       7       |       8       |       9       |
        DEF_layer {
            bindings = <
                &lt CONF Q      &kp W           &kp E           &kp R           &kp T                   &kp Y           &kp U           &kp I           &kp O           &kp P
                &hl LSFT A      &kp S           &kp D           &kp F           &kp G                   &kp H           &kp J           &kp K           &kp L           &hr RSFT SEMI
                &kp Z           &kp X           &hl LALT C      &hl LCTR V      &kp B                   &kp N           &hr RCTR M      &csm LALT 0     &dtcl           &kp ENTER
                                                                &mt LWIN TAB    &lt FUN ESC             &lt NAV SPACE   &lt NUM ENTER
            >;
        };

        COL_layer {
            bindings = <
                &lt CONF Q      &kp W           &kp F           &kp P           &kp B                   &kp J           &kp L           &kp U           &kp Y           &kp SEMI
                &hl LSFT A      &kp R           &kp S           &kp T           &kp G                   &kp M           &kp N           &kp E           &kp I           &hr RSFT O
                &kp Z           &kp X           &hl LALT C      &hl LCTR D      &kp V                   &kp K           &hr RCTR H      &csm LALT 0     &dtcl           &kp ENTER
                                                                &mt LWIN TAB    &lt FUN ESC             &lt NAV SPACE   &lt NUM ENTER
            >;
        };

        // NUM_layer {
        //     bindings = <
        //         &kp F1          &kp F2          &kp F3          &kp F4          &kp F5                  &kp F6          &kp F7          &kp F8          &kp F9          &kp F10
        //         &hl LSFT N1     &kp N2          &kp N3          &kp N4          &kp N5                  &kp N6          &kp N7          &kp N8          &kp N9          &hr RSFT N0
        //         &kp BSLH        &kp LBRC        &hl LALT RBRC   &hl LCTR N5     &kp F11                 &kp F12         &hr RCTR N6     &csm LALT 0     &dtcl           &kp SEMI
        //                                                         &mt LWIN TAB    &trans                  &lt NAV SPACE   &mt RALT ENTER
        //     >;
        // };

        NUM_layer {
            bindings = <
                &none           &none           &none           &none           &none                   &none           &kp N7          &kp N8          &kp N9          &none
                &kp LSFT        &none           &none           &none           &none                   &none           &kp N4          &kp N5          &kp N6          &none
                &none           &none           &kp LALT        &kp LCTR        &none                   &none           &kp N1          &kp N2          &kp N3          &kp N0
                                                                &mt LWIN TAB    &lt FUN ESC             &lt NAV SPACE   &trans
            >;
        };

        FUN_layer {
            bindings = <
                &kp F9          &kp F10         &kp F11         &kp F12         &none                   &none           &none           &none           &none           &none
                &kp F5          &kp F6          &kp F7          &kp F8          &none                   &none           &none           &none           &none           &kp RSFT
                &kp F1          &kp F2          &kp F3          &kp F4          &none                   &none           &kp RCTR        &kp LALT        &none           &none
                                                                &mt LWIN TAB    &trans                  &none           &none
            >;
        };

        NAV_layer {
            bindings = <
                &none           &none           &sw             &none           &mt PSCRN SNIP          &zm LG(ESC) 0   &none           &dh             &none           &none
                &hl LSFT SC(Z)  &kp SA(S)       &df A T         &mt SC(F) LC(F) &mt LA(G) LC(G)         &di LA(UP) 0    &kp LC(LEFT)    &kp UP          &kp LC(RIGHT)   &hr RSHF PG_UP
                &kp LC(Z)       &kp LC(X)       &hl LALT LC(C)  &hl LCTR LC(V)  &mt SC(B) LS(ESC)       &db LC(B) 0     &kp LEFT        &kp DOWN        &kp RIGHT       &kp PG_DN
                                                                &mt LWIN TAB    &lt NUM ESC             &trans          &mt RALT ENTER
            >;
        };

        CFG_layer {
            bindings = <
                &trans          &bt BT_SEL 0    &bt BT_SEL 1    &bt BT_SEL 2    &bootloader             &none           &none           &none           &none           &none
                &bt BT_CLR      &bt BT_SEL 3    &bt BT_SEL 4    &bt BT_SEL 5    &sys_reset              &none           &none           &none           &none           &none
                &none           &none           &none           &none           &none                   &none           &none           &none           &none           &none
                                                                &out OUT_TOG    &tog COL                &none           &none
            >;
        };
    };

    /*                KEY POSITIONS
    ╭────────────────────╮ ╭────────────────────╮
    │  0   1   2   3   4 │ │  5   6   7   8   9 │
    │ 10  11  12  13  14 │ │ 15  16  17  18  19 │
    │ 20  21  22  23  24 │ │ 25  26  27  28  29 │
    ╰───────────╮ 30  31 │ │ 32  33 ╭───────────╯
                ╰────────╯ ╰────────╯         */

    // #define COMBO timeout-ms = <100>
    #define COMBO timeout-ms = <100>
    #define LCOMBO timeout-ms = <200>

    combos {
        compatible = "zmk,combos";

        // CAPSLOCK, CAPSWORD
        clck    {key-positions = <4 5>; bindings = <&kp CLCK>; layers = <DEF COL>; COMBO;};                     // CAPSLOCK
        cwrd    {key-positions = <14 15>; bindings = <&caps_word>; layers = <DEF COL>; COMBO;};                 // CAPSWORD
        nwrd    {key-positions = <24 25>; bindings = <&num_word>; layers = <DEF COL>; COMBO;};                  // NUMWORD

        // ESC, TAB, DEL and BSPC
        esc     {key-positions = <11 12>; bindings = <&kp ESC>; layers = <DEF COL NUM NAV>; COMBO;};            // ESC
        tab     {key-positions = <12 13>; bindings = <&kp TAB>; layers = <DEF COL NUM NAV>; COMBO;};            // TAB
        bspc    {key-positions = <16 17>; bindings = <&kp BSPC>; layers = <DEF COL NUM NAV>; COMBO;};           // BSPC
        del     {key-positions = <17 18>; bindings = <&kp DEL>; layers = <DEF COL NUM NAV>; COMBO;};            // DEL
        // bsdl    {key-positions = <16 17>; bindings = <&bsdl>; layers = <DEF COL NUM NAV>; COMBO;};              // BSDL

        // GRAVE, APOS
        grave   {key-positions = <14 24>; bindings = <&kp GRAVE>; layers = <DEF COL>; COMBO;};                  // `~
        apos    {key-positions = <15 25>; bindings = <&kp APOS>; layers = <DEF COL>; COMBO;};                   // '"

        // NUMERICS
        n1      {key-positions = <0 10>; bindings = <&kp N1>; layers = <DEF COL>; COMBO;};                      // 1
        n2      {key-positions = <1 11>; bindings = <&kp N2>; layers = <DEF COL>; COMBO;};                      // 2
        n3      {key-positions = <2 12>; bindings = <&kp N3>; layers = <DEF COL>; COMBO;};                      // 3
        n4      {key-positions = <3 13>; bindings = <&kp N4>; layers = <DEF COL>; COMBO;};                      // 4
        n5      {key-positions = <4 14>; bindings = <&kp N5>; layers = <DEF COL>; COMBO;};                      // 5
        n6      {key-positions = <5 15>; bindings = <&kp N6>; layers = <DEF COL>; COMBO;};                      // 6
        n7      {key-positions = <6 16>; bindings = <&kp N7>; layers = <DEF COL>; COMBO;};                      // 7
        n8      {key-positions = <7 17>; bindings = <&kp N8>; layers = <DEF COL>; COMBO;};                      // 8
        n9      {key-positions = <8 18>; bindings = <&kp N9>; layers = <DEF COL>; COMBO;};                      // 9
        n0      {key-positions = <9 19>; bindings = <&kp N0>; layers = <DEF COL>; COMBO;};                      // 0

        // NUM LAYER
        na      {key-positions = <16 26>; bindings = <&kp LS(A)>; layers = <NUM>; COMBO;};                      // A
        nb      {key-positions = <17 27>; bindings = <&kp LS(B)>; layers = <NUM>; COMBO;};                      // B
        nc      {key-positions = <18 28>; bindings = <&kp LS(C)>; layers = <NUM>; COMBO;};                      // C
        nd      {key-positions = <6 16>; bindings = <&kp LS(D)>; layers = <NUM>; COMBO;};                       // D
        ne      {key-positions = <7 17>; bindings = <&kp LS(E)>; layers = <NUM>; COMBO;};                       // E
        nf      {key-positions = <8 18>; bindings = <&kp LS(F)>; layers = <NUM>; COMBO;};                       // F

        // SYMBOLS
        // s1      {key-positions = <0 10>; bindings = <&kp EXCL>; layers = <NUM>; COMBO;};                        // !
        // s2      {key-positions = <1 11>; bindings = <&kp AT>; layers = <NUM>; COMBO;};                          // @
        // s3      {key-positions = <2 12>; bindings = <&kp HASH>; layers = <NUM>; COMBO;};                        // #
        // s4      {key-positions = <3 13>; bindings = <&kp DLLR>; layers = <NUM>; COMBO;};                        // $
        // s5      {key-positions = <4 14>; bindings = <&kp PRCNT>; layers = <NUM>; COMBO;};                       // %
        // s6      {key-positions = <5 15>; bindings = <&kp CARET>; layers = <NUM>; COMBO;};                       // ^
        // s7      {key-positions = <6 16>; bindings = <&kp AMPS>; layers = <NUM>; COMBO;};                        // &
        // s8      {key-positions = <7 17>; bindings = <&kp ASTRK>; layers = <NUM>; COMBO;};                       // *
        // // s9      {key-positions = <8 18>; bindings = <&kp N9>; layers = <NUM>; COMBO;};                           // (
        // // s10     {key-positions = <9 19>; bindings = <&kp N0>; layers = <NUM>; COMBO;};                           // )
        // s11     {key-positions = <10 20>; bindings = <&kp PIPE>; layers = <NUM>; COMBO;};                       // |
        // s12     {key-positions = <19 29>; bindings = <&kp QMARK>; layers = <NUM>; COMBO;};                      // ?
        // s13     {key-positions = <14 24>; bindings = <&kp TILDE>; layers = <NUM>; COMBO;};                      // ~
        // s14     {key-positions = <15 25>; bindings = <&kp DQT>; layers = <NUM>; COMBO;};                        // "

        // PAR, BKT
        // lpar    {key-positions = <17 27>; bindings = <&kp LPAR>; layers = <DEF COL NUM>; COMBO;};               // (
        //  rpar    {key-positions = <18 28>; bindings = <&kp RPAR>; layers = <DEF COL NUM>; COMBO;};               // )
        lpar    {key-positions = <17 27>; bindings = <&lplt>; layers = <DEF COL>; COMBO;};                  // (<
        rpar    {key-positions = <18 28>; bindings = <&rpgt>; layers = <DEF COL>; COMBO;};                  // )>
        lbkt    {key-positions = <11 21>; bindings = <&kp LBKT>; layers = <DEF COL>; COMBO;};               // [{
        rbkt    {key-positions = <12 22>; bindings = <&kp RBKT>; layers = <DEF COL>; COMBO;};               // ]}
        // lbrc    {key-positions = <11 21>; bindings = <&kp LBRC>; layers = <NUM>; COMBO;};                       // {
        // rbrc    {key-positions = <12 22>; bindings = <&kp RBRC>; layers = <NUM>; COMBO;};                       // }

        // EQUAL, COLON
        colon   {key-positions = <13 23>; bindings = <&kp COLON>; layers = <DEF COL>; COMBO;};              // :
        equal   {key-positions = <16 26>; bindings = <&kp EQUAL>; layers = <DEF COL>; COMBO;};              // =

        // SLASH, BSLH
        bslh    {key-positions = <10 20>; bindings = <&kp BSLH>; layers = <DEF COL>; LCOMBO;};                  // \|
        slash   {key-positions = <19 29>; bindings = <&mt LC(SLASH) SLASH>; layers = <DEF COL>; LCOMBO;};       // /?

        // MINUS, PLUS, DIV and MUL
        plus    {key-positions = <13 14>; bindings = <&kp PLUS>; layers = <DEF COL>; COMBO;};               // +
        // mul     {key-positions = <23 24>; bindings = <&kp STAR>; layers = <DEF COL>; COMBO;};                 // *
        mul     {key-positions = <23 24>; bindings = <&stex>; layers = <DEF COL>; COMBO;};                  // *!
        minus   {key-positions = <15 16>; bindings = <&kp MINUS>; layers = <DEF COL>; COMBO;};              // -_
        div     {key-positions = <25 26>; bindings = <&kp SLASH>; layers = <DEF COL>; COMBO;};              // /?

        // NAV LAYERS COMBOS
        home    {key-positions = <16 26>; bindings = <&kp HOME>; layers = <NAV>; COMBO;};                       // HOME
        end     {key-positions = <18 28>; bindings = <&kp END>; layers = <NAV>; COMBO;};                        // END
     };

    behaviors {
        lplt: lpar_lt {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LPAR>, <&kp LT>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_RSFT)>;
        };

        rpgt: rpar_gt {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp RPAR>, <&kp GT>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_RSFT)>;
        };

        dtcl: dot_colon {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp COLON>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_RSFT)>;
        };

        cmsm: comma_semi {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp SEMI>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_RSFT)>;
        };

        csm: comma_semi_mod {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            bindings = <&kp>, <&cmsm>;
        };

        stex: star_excl {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp STAR>, <&kp EXCL>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_RSFT)>;
        };

        sn: smart_num {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            bindings = <&num_word>, <&kp>;
        };

        nd: num_dance {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&num_word>, <&sl NUM>;  // reverse this for sticky-num on single tap
        };

        // Obsługa zmiany aplikacji za pomocą Alt+Tab
        sw: windows_application_iterator {       // obsługa Alt+Tab
            compatible = "zmk,behavior-tri-state";
            #binding-cells = <0>;
            bindings = <&kt LALT>, <&kp TAB>, <&kt LALT>;
            ignored-key-positions = <20 29>;    // Oba SHFT
            // ignored-key-positions = <LT2>;   // tutaj należałoby dodać pozycję klawisza realizującego LS(TAB)
        };

        hl: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 30 31 32 33>;
            hold-trigger-on-release;
        };

        hr: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32 33>;
            hold-trigger-on-release;
        };

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <100>;
            bindings = <&kp>, <&kp>;
        };

        bsdl: bspc_del {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp BSPC>, <&kp DEL>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_RSFT)>;
        };

        // Obsługa lupy windowsowej
        za: windows_magnifier_actions { // powiększanie i pomniejszanie (Win++ / Win+-)
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LG(EQUAL)>, <&kp LG(MINUS)>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        zm: windows_magnifier {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <400>;
            bindings = <&kp>, <&za>;
        };

        // Zawijanie kodu w Delphi
        df: delphi_code_folding {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <400>;
            bindings = <&dfm>, <&dfm>;
        };

        // Iterowanie po kolejnych wystąpieniach identyfikatora + Skok do definicji (po przytrzymaniu klawisza)
        dii: delphi_identifier_iterator { // przeskakuje pomiedzy kolejnymi wystąpieniami identyfikatora
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp CA(DOWN)>, <&kp CA(UP)>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        di: delphi_identifier {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <400>;
            bindings = <&kp>, <&dii>;
        };

        // Iterowanie po kolejnych zakładkach + Dodawanie / Usuwanie nowej zakładki (wymaga Parnassus Bookmarks)
        dbi: delphi_bookmark_iterator {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp CA(RIGHT)>, <&kp CA(LEFT)>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        db: delphi_bookmark {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <400>;
            bindings = <&kp>, <&dbi>;
        };

        // Obsługa historii (go back, go forward) w Delphi
        dh: delphi_history_iterator {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LC(LEFT)>, <&kp LC(RIGHT)>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    macros {
        dfm: delphi_code_folding_macro { // code block folding
            #binding-cells = <1>;
            compatible = "zmk,behavior-macro-one-param";
            bindings =
                <&macro_press &kp LSHFT &kp LCTRL>,
                <&macro_tap &kp K>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_release &kp LSHFT &kp LCTRL>;
        };
    };

    // conditional_layers {
    //     compatible = "zmk,conditional-layers";
    //     tri_layer {
    //         if-layers = <NUM NAV>;
    //         then-layer = <FUN>;
    //     };
    // };
};