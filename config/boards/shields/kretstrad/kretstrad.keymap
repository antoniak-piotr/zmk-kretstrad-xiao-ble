/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define DEF 0       
#define GRN 1        
#define RED 2
#define BTH 3           // aktywne oba modyfikatory (RED + GRN)
#define CFG 4           // konfiguracja Bluetooth

#define LGS(KEY) LG(LS(KEY))
#define LSC(KEY) LS(LC(KEY))
#define LCA(KEY) LC(LA(KEY))
#define LSCA(KEY) LS(LC(LA(KEY)))

&mt {
    flavor = "tap-preferred";
    tapping-term-ms = <200>;
    quick-tap-ms = <125>;
    global-quick-tap;
};

&lt {
    flavor = "tap-preferred";
    tapping-term-ms = <200>;
    quick-tap-ms = <125>;
    global-quick-tap;
};

&caps_word {
    continue-list = <UNDERSCORE N1 N2 N3 N4 N5 N6 N7 N8 N9 N0 BSPC DEL ESC>;
};

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <GRN RED>;
            then-layer = <BTH>;
        };
    };
};

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "homerow mods";
            #binding-cells = <2>;
            tapping_term_ms = <225>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

            //  |       0       |       1       |       2       |       3       |       4       |       |       5       |       6       |       7       |       8       |       9       |
        def_layer {
            bindings = <
                &lt CFG Q       &kp W           &kp E           &kp R           &kp T                   &kp Y           &kp U           &kp I           &kp O           &kp P
                &kp A           &kp S           &kp D           &kp F           &kp G                   &kp H           &kp J           &kp K           &kp L           &kp SEMI
                &mt LSHFT Z     &mt LWIN X      &mt LALT C      &mt LCTRL V     &kp B                   &kp N           &mt LCTRL M     &mt LALT COMMA  &mt LWIN DOT    &mt RSHFT SLASH
                                                                &mt LWIN ENTER  &lt GRN SPACE           &lt RED SPACE   &mt RALT ENTER
            >;
        };

        grn_layer {
            bindings = <
                &none           &none           &none           &none           &none                   &none           &none           &none           &none           &none
                &kp N1          &kp N2          &kp N3          &kp N4          &kp MINUS               &kp EQUAL       &kp N7          &kp N8          &kp N9          &kp N0
                &kp LSHFT       &mt LWIN COLON  &mt LALT EQUAL  &mt LCTRL N5    &kp GRAVE               &kp SQT         &mt LCTRL N6    &mt LALT COMMA  &mt LWIN DOT    &mt RSHFT BSLH
                                                                &mt LWIN ENTER  &trans                  &lt RED SPACE   &mt RALT ENTER
            >;
        };

        red_layer {
            bindings = <
                &none           &none           &none           &none           &none                   &none           &none           &none           &none           &none
                &kp F1          &kp F2          &kp F3          &kp F4          &kp LSC(B)              &kp LCA(UP)     &kp F7          &kp F8          &kp F9          &kp F10
                &kp LSHFT       &kp LWIN        &kp LALT        &mt LCTRL F5    &kp LS(ESC)             &kp LCA(DOWN)   &mt LCTRL F6    &kp LALT        &kp LWIN        &kp RSHFT
                                                                &mt LWIN ENTER  &lt GRN SPACE           &trans          &mt RALT ENTER
            >;
        };

        bth_layer {
            bindings = <
                &none           &none           &none           &none           &none                   &none           &none           &none           &none           &none
                &none           &kp LGS(S)      &kp PSCRN       &none           &kp LG(EQUAL)           &kp PG_UP       &kp HOME        &kp UP          &kp END         &none
                &kp LSHFT       &mt LWIN LC(X)  &mt LALT LC(C)  &mt LCTRL LC(V) &kp LG(MINUS)           &kp PG_DN       &kp LEFT        &kp DOWN        &kp RIGHT       &kp RSHFT
                                                                &mt LWIN ENTER  &trans                  &trans          &mt RALT ENTER
            >;
        };

        cfg_layer {
            bindings = <
                &trans          &bt BT_SEL 0    &bt BT_SEL 1    &bt BT_SEL 2    &none                   &none           &none           &none           &none           &none
                &none           &bt BT_SEL 3    &bt BT_SEL 4    &bt BT_SEL 5    &none                   &none           &none           &none           &none           &none
                &none           &bt BT_SEL 6    &bt BT_SEL 7    &bt BT_SEL 8    &none                   &none           &none           &none           &none           &none
                                                                &bt BT_CLR      &none                   &none           &none
            >;
        };
    };


    /*                KEY POSITIONS
    ╭────────────────────╮ ╭────────────────────╮
    │  0   1   2   3   4 │ │  5   6   7   8   9 │
    │ 10  11  12  13  14 │ │ 15  16  17  18  19 │
    │ 20  21  22  23  24 │ │ 25  26  27  28  29 │
    ╰───────────╮ 30  31 │ │ 32  33 ╭───────────╯
                ╰────────╯ ╰────────╯         */

    combos {
        compatible = "zmk,combos";

#define COMBO(NAME, BINDINGS, KEYPOS, LAYERS, TERM) \
        combo_##NAME { \
            timeout-ms = <TERM>; \
            bindings = <BINDINGS>; \
            key-positions = <KEYPOS>; \
            layers = <LAYERS>; \
        };

        // nawiasy
        COMBO(lbrc, &kp LBRC, 11 21, DEF GRN, 100)        // {
        COMBO(lbkt, &kp LBKT, 12 22, DEF GRN, 100)        // [
        COMBO(lpar, &kp LPAR, 13 23, DEF GRN, 100)        // (
        COMBO(rpar, &kp RPAR, 16 26, DEF GRN, 100)        // )
        COMBO(rbkt, &kp RBKT, 17 27, DEF GRN, 100)        // ]
        COMBO(rbrc, &kp RBRC, 18 28, DEF GRN, 100)        // }

        // CAPS-WORD i UNDER (podkreślenie)
        COMBO(caps, &caps_word, 20 29, DEF GRN, 100)      // CAPS WORD
        COMBO(undr, &kp UNDER, 23 26, DEF GRN, 100)       // _

        // F11 i F12
        COMBO(f11, &kp F11, 13 23, RED, 100)              // F11
        COMBO(f12, &kp F12, 16 26, RED, 100)              // F12

        // symbole
        COMBO(excl, &kp EXCL, 0 10, DEF, 100)              // !
        COMBO(at, &kp AT, 1 11, DEF, 100)                  // @
        COMBO(hash, &kp HASH, 2 12, DEF, 100)              // #
        COMBO(dllr, &kp DLLR, 3 13, DEF, 100)              // $
        COMBO(prcn, &kp PRCNT, 4 14, DEF, 100)             // %

        COMBO(caret, &kp CARET, 5 15, DEF, 100)            // ^
        COMBO(equal, &kp EQUAL, 6 16, DEF, 100)            // =
        COMBO(lt, &kp LT, 7 17, DEF, 100)                  // <
        COMBO(gt, &kp GT, 8 18, DEF, 100)                  // >
        COMBO(colon, &kp COLON, 9 19, DEF, 100)            // :

  /*      // CARET 
        combo_caret {
            timeout-ms = <100>;
            key-positions = <5 15>;
            bindings = <&kp CARET>;
            layers = <DEF>;
        };

        // EQUAL 
        combo_equal {
            timeout-ms = <100>;
            key-positions = <6 16>;
            bindings = <&kp EQUAL>;
            layers = <DEF>;
        };

        // LT i GT 
        combo_lt {
            timeout-ms = <100>;
            key-positions = <7 17>;
            bindings = <&kp LT>;
            layers = <DEF>;
        };

        combo_gt {
            timeout-ms = <100>;
            key-positions = <8 18>;
            bindings = <&kp GT>;
            layers = <DEF>;
        };

        // COLON
        combo_colon {
            timeout-ms = <100>;
            key-positions = <9 19>;
            bindings = <&kp COLON>;
            layers = <DEF>;
        };
*/
        // AMPS 
        combo_amps {
            timeout-ms = <100>;
            key-positions = <10 20>;
            bindings = <&kp AMPS>;
            layers = <DEF>;
        };

        // GRAVE 
        combo_grave {
            timeout-ms = <100>;
            key-positions = <14 24>;
            bindings = <&kp GRAVE>;
            layers = <DEF>;
        };

        // APOS 
        combo_apos {
            timeout-ms = <100>;
            key-positions = <15 25>;
            bindings = <&kp APOS>;
            layers = <DEF>;
        };

        // BSLH (Back Slash)  
        combo_bslh {
            timeout-ms = <100>;
            key-positions = <19 29>;
            bindings = <&kp BSLH>;
            layers = <DEF>;
        };

        // STAR i SLASH (mnożenie i dzielenia)
        combo_slash {
            timeout-ms = <100>;
            key-positions = <23 24>;
            bindings = <&kp SLASH>;
            layers = <DEF GRN>;
        };
    
        combo_star {
            timeout-ms = <100>;
            key-positions = <25 26>;
            bindings = <&kp STAR>;
            layers = <DEF GRN>;
        };

        // PLUS i MINUS (dodawanie i odejmowanie)
        combo_minus {
            timeout-ms = <100>;
            key-positions = <13 14>;
            bindings = <&kp MINUS>;
            layers = <DEF GRN>;
        };

        combo_plus {
            timeout-ms = <100>;
            key-positions = <15 16>;
            bindings = <&kp PLUS>;
            layers = <DEF GRN>;
        };

/*        // TAB i ESC
        combo_tab {
            timeout-ms = <100>;
            key-positions = <12 13>;
            bindings = <&kp TAB>;
            layers = <DEF GRN>;
        };

        combo_esc {
            timeout-ms = <100>;
            key-positions = <22 23>;
            bindings = <&kp ESC>;
            layers = <DEF GRN>;
        };
*/
        // TAB i ESC
        COMBO(tab, &kp TAB, 12 13, DEF GRN, 100)              // TAB
        COMBO(esc, &kp ESC, 22 23, DEF GRN, 100)              // ESC

        // BSPC i DEL 
        COMBO(bsp, &kp BSPC, 16 17, DEF GRN, 100)              // TAB
        COMBO(del, &kp DEL, 26 27, DEF GRN, 100)              // ESC
/*        combo_bspc {
            timeout-ms = <100>;
            key-positions = <16 17>;
            bindings = <&kp BSPC>;
            layers = <DEF GRN>;
        };

        combo_del {
            timeout-ms = <100>;
            key-positions = <26 27>;
            bindings = <&kp DEL>;
            layers = <DEF GRN>;
        };
*/
        // wyjście z narzędzia magnifier (Win+Esc)        
        combo_magnifier_exit {
            timeout-ms = <100>;
            key-positions = <14 24>;
            bindings = <&kp LG(ESC)>;
            layers = <BTH>;
        };
    };    
};
