/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define DEF 0       
#define GRN 1        
#define RED 2
#define BTH 3           // aktywne oba modyfikatory (RED + GRN)
#define CFG 4           // konfiguracja Bluetooth

#define LGS(KEY) LG(LS(KEY))
#define LSC(KEY) LS(LC(KEY))
#define LCA(KEY) LC(LA(KEY))
#define LSCA(KEY) LS(LC(LA(KEY)))

&mt {
    flavor = "tap-preferred";
    tapping-term-ms = <200>;
    quick-tap-ms = <125>;
    global-quick-tap;
};

&lt {
    flavor = "tap-preferred";
    tapping-term-ms = <200>;
    quick-tap-ms = <125>;
    global-quick-tap;
};

&caps_word {
    continue-list = <UNDERSCORE N1 N2 N3 N4 N5 N6 N7 N8 N9 N0 BSPC DEL ESC>;
};

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <GRN RED>;
            then-layer = <BTH>;
        };
    };
};

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "homerow mods";
            #binding-cells = <2>;
            tapping_term_ms = <225>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

            //  |       0       |       1       |       2       |       3       |       4       |       |       5       |       6       |       7       |       8       |       9       |
        def_layer {
            bindings = <
                &lt CFG Q       &kp W           &kp E           &kp R           &kp T                   &kp Y           &kp U           &kp I           &kp O           &kp P
                &kp A           &kp S           &kp D           &kp F           &kp G                   &kp H           &kp J           &kp K           &kp L           &kp SEMI
                &mt LSHFT Z     &mt LWIN X      &mt LALT C      &mt LCTRL V     &kp B                   &kp N           &mt LCTRL M     &mt LALT COMMA  &mt LWIN DOT    &mt RSHFT SLASH
                                                                &mt LWIN ESC    &lt GRN TAB             &lt RED SPACE   &mt RALT ENTER
            >;
        };

        grn_layer {
            bindings = <
                &none           &none           &none           &none           &none                   &none           &none           &none           &none           &none
                &kp N1          &kp N2          &kp N3          &kp N4          &kp N5                  &kp N6          &kp N7          &kp N8          &kp N9          &kp N0
                &kp LSHFT       &kp LWIN        &kp LALT        &kp LCTRL       &kp GRAVE               &kp SQT         &kp LCTRL       &kp LALT        &kp LWIN        &mt RSHFT BSLH
                                                                &mt LWIN ESC    &trans                  &lt RED SPACE   &mt RALT ENTER
            >;
        };

        red_layer {
            bindings = <
                &none           &none           &none           &none           &none                   &none           &none           &none           &none           &none
                &kp F1          &kp F2          &kp F3          &kp F4          &kp F5                  &kp F6          &kp F7          &kp F8          &kp F9          &kp F10
                &kp LSHFT       &kp LWIN        &kp LALT        &kp LCTRL       &kp F11                 &kp F12         &kp LCTRL       &kp LALT        &kp LWIN        &kp RSHFT
                                                                &mt LWIN ESC    &lt GRN TAB             &trans          &mt RALT ENTER
            >;
        };

        bth_layer {
            bindings = <
                &none           &none           &none           &none           &none                   &none           &none           &none           &none           &none
                &none           &kp LGS(S)      &kp PSCRN       &none           &kp LG(EQUAL)           &kp PG_UP       &none           &kp UP          &none           &none
                &kp LSHFT       &mt LWIN LC(X)  &mt LALT LC(C)  &mt LCTRL LC(V) &kp LG(MINUS)           &kp PG_DN       &kp LEFT        &kp DOWN        &kp RIGHT       &kp RSHFT
                                                                &mt LWIN ESC    &trans                  &trans          &mt RALT ENTER
            >;
        };

        cfg_layer {
            bindings = <
                &trans          &bt BT_SEL 0    &bt BT_SEL 1    &bt BT_SEL 2    &none                   &none           &none           &none           &none           &none
                &none           &bt BT_SEL 3    &bt BT_SEL 4    &bt BT_SEL 5    &none                   &none           &none           &none           &none           &none
                &none           &bt BT_SEL 6    &bt BT_SEL 7    &bt BT_SEL 8    &none                   &none           &none           &none           &none           &none
                                                                &bt BT_CLR      &none                   &none           &none
            >;
        }; 
    };


    #define COMBO(NAME, BINDINGS, KEYPOS, LAYERS, TERM) \
        combo_##NAME { \
            timeout-ms = <TERM>; \
            bindings = <BINDINGS>; \
            key-positions = <KEYPOS>; \
            layers = <LAYERS>; \
        };

    /*                KEY POSITIONS
    ╭────────────────────╮ ╭────────────────────╮
    │  0   1   2   3   4 │ │  5   6   7   8   9 │
    │ 10  11  12  13  14 │ │ 15  16  17  18  19 │
    │ 20  21  22  23  24 │ │ 25  26  27  28  29 │
    ╰───────────╮ 30  31 │ │ 32  33 ╭───────────╯
                ╰────────╯ ╰────────╯         */
    combos {
        compatible = "zmk,combos";

        // CAPS-WORD i UNDER (podkreślenie)
        COMBO(caps, &caps_word, 20 29, DEF, 100)              // CAPS WORD
        COMBO(undr, &kp UNDER, 23 26, DEF, 100)               // _

        // nawiasy
        COMBO(lbkt, &kp LBKT, 12 22, DEF GRN, 100)            // [
        COMBO(lpar, &kp LPAR, 13 23, DEF GRN, 100)            // (
        COMBO(rpar, &kp RPAR, 16 26, DEF GRN, 100)            // )
        COMBO(rbkt, &kp RBKT, 17 27, DEF GRN, 100)            // ]

        // symbole
        COMBO(at, &kp AT, 3 13, DEF, 100)                     // @
        COMBO(hash, &kp HASH, 11 12, DEF, 100)                // #
        COMBO(dllr, &kp DLLR, 21 22, DEF, 100)                // $  
        COMBO(caret, &kp CARET, 6 16, DEF, 100)               // ^
        COMBO(equal, &kp EQUAL, 17 18, DEF, 100)              // =
        COMBO(colon, &kp COLON, 27 28, DEF, 100)              // :

        // plus, minus, mnożenie i dzielenie
        COMBO(minus, &kp MINUS, 13 14, DEF, 100)              // -
        COMBO(slash, &kp SLASH, 23 24, DEF, 100)              // /
        COMBO(plus, &kp PLUS, 15 16, DEF, 100)                // +
        COMBO(star, &kp STAR, 25 26, DEF, 100)                // *

        // odwrotny i zwykły apostrof (GRAVE i APOS)
        COMBO(grave, &kp GRAVE, 14 24, DEF, 100)              // `
        COMBO(apos, &kp APOS, 15 25, DEF, 100)                // '
        
        // TAB, ESC, BACKSPACE i DELETE
        COMBO(tab, &kp TAB, 12 13, DEF GRN, 100)              // TAB
        COMBO(esc, &kp ESC, 22 23, DEF GRN, 100)              // ESC
        COMBO(bsp, &kp BSPC, 17 18, DEF GRN BTH, 100)         // BSPC
        COMBO(del, &kp DEL, 27 28, DEF GRN BTH, 100)          // DEL
        
        // wyjście z narzędzia magnifier (Win+Esc)        
        COMBO(magex, &kp LG(ESC), 14 24, BTH, 100)            // Win + ESC
    };
};
