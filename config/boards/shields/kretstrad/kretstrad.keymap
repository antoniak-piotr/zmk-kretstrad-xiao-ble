#include <behaviors.dtsi>
#include <behaviors/num_word.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define DEF 0           // QWERTY
#define COL 1           // Colemak-DH
#define NUM 2           // liczby
#define NAV 3           // nawigacja
// #define NAV 3           // nawigacja
#define CONF 4          // konfiguracja (np. Bluetooth)

#define LSHF LSHFT
#define LCTR LCTRL
#define RSHF RSHFT
#define RCTR RCTRL

#define LSG(KEY) LS(LG(KEY))
#define LSA(KEY) LS(LA(KEY))
#define LSC(KEY) LS(LC(KEY))
#define LCA(KEY) LC(LA(KEY))
#define LSCA(KEY) LS(LC(LA(KEY)))
#define LGC(KEY) LG(LC(KEY))

#define SNIP LSG(S)                 // wykonuje zrzut ekranu za pomocą narzędzia SNIP (Win+Shift+S)
#define DESK LGC(F4)                // zamyka pulpit wirtualny

&mt {
    // flavor = "tap-preferred";
    tapping-term-ms = <200>;
    // quick-tap-ms = <150>;
    // require-prior-idle-ms = <100>;
};

&lt {
    // flavor = "tap-preferred";
    tapping-term-ms = <200>;
    quick-tap-ms = <150>;
    // require-prior-idle-ms = <100>;
};

&sl {  // sticky-layer config
    ignore-modifiers;          // allow chording sticky mods & layers
};

&caps_word {
    continue-list = <UNDER N1 N2 N3 N4 N5 N6 N7 N8 N9 N0 BSPC DEL>;
};

/ {
    keymap {
        compatible = "zmk,keymap";

            //  |       0       |       1       |       2       |       3       |       4       |       |       5       |       6       |       7       |       8       |       9       |
        DEF_layer {
            bindings = <
                &lt CONF Q      &kp W           &kp E           &kp R           &kp T                   &kp Y           &kp U           &kp I           &kp O           &kp P
                &kp A           &kp S           &kp D           &kp F           &kp G                   &kp H           &kp J           &kp K           &kp L           &kp SEMI
                &hl LSHF Z      &kp X           &hl LCTR C      &hl LALT V      &kp B                   &kp N           &hr LALT M      &hr RCTR COMMA  &kp DOT         &hr RSHF ENTER
                                                                &mt LWIN TAB    &sn NUM ESC             &lt NAV SPACE   &mt RALT ENTER
            >;
        };

        COL_layer {
            bindings = <
                &lt CONF Q      &kp W           &kp F           &kp P           &kp B                   &kp J           &kp L           &kp U           &kp Y           &kp SEMI
                &kp A           &kp R           &kp S           &kp T           &kp G                   &kp M           &kp N           &kp E           &kp I           &kp O
                &hl LSHF Z      &kp X           &hl LCTR C      &hl LALT D      &kp V                   &kp K           &hr LALT H      &hr RCTR COMMA  &kp DOT         &hr RSHF ENTER
                                                                &mt LWIN TAB    &lt NUM ESC             &lt NAV SPACE   &mt RALT ENTER
            >;
        };

        NUM_layer {
            bindings = <
                &kp F1          &kp F2          &kp F3          &kp F4          &kp F5                  &kp F6          &kp F7          &kp F8          &kp F9          &kp F10
                &kp N1          &kp N2          &kp N3          &kp N4          &kp N5                  &kp N6          &kp N7          &kp N8          &kp N9          &kp N0
                &hl LSHF BSLH   &none           &kp LCTR        &kp LALT        &kp F11                 &kp F12         &kp LALT        &hr RCTR COMMA  &kp DOT         &hr RSHF SLASH
                                                                &mt LWIN TAB    &trans                  &lt NAV SPACE   &mt RALT ENTER
            >;
        };

        NAV_layer {
            bindings = <
                &dm(A)          &sw             &dm(R)          &dm(T)          &mt PSCRN SNIP          &zoom           &kp LA(LEFT)    &kp LA(UP)      &kp LA(RIGHT)   &none
                &kp LSC(Z)      &kp LSA(S)      &mt DESK LG(D)  &kp LC(F)       &kp LC(G)               &kp LCA(UP)     &kp LEFT        &kp UP          &kp RIGHT       &kp PG_UP
                &hl LSHF LC(Z)  &kp LC(X)       &hl LCTR LC(C)  &hl LALT LC(V)  &kp LSC(B)              &kp LCA(DOWN)   &kp LC(LEFT)    &kp DOWN        &kp LC(RIGHT)   &hr RSHF PG_DN
                                                                &mt LWIN TAB    &lt NUM ESC             &trans          &mt RALT ENTER
            >;
        };

        CFG_layer {
            bindings = <
                &trans          &bt BT_SEL 0    &bt BT_SEL 1    &bt BT_SEL 2    &bootloader             &none           &none           &none           &none           &none
                &bt BT_CLR      &bt BT_SEL 3    &bt BT_SEL 4    &bt BT_SEL 5    &sys_reset              &none           &none           &none           &none           &none
                &none           &none           &none           &none           &none                   &none           &none           &none           &none           &none
                                                                &out OUT_TOG    &tog COL                &none           &none
            >;
        };
    };

    /*                KEY POSITIONS
    ╭────────────────────╮ ╭────────────────────╮
    │  0   1   2   3   4 │ │  5   6   7   8   9 │
    │ 10  11  12  13  14 │ │ 15  16  17  18  19 │
    │ 20  21  22  23  24 │ │ 25  26  27  28  29 │
    ╰───────────╮ 30  31 │ │ 32  33 ╭───────────╯
                ╰────────╯ ╰────────╯         */

    // #define COMBO timeout-ms = <100>
    #define COMBO timeout-ms = <200>
    #define LCOMBO timeout-ms = <250>

    combos {
        compatible = "zmk,combos";

        // CAPSLOCK, CAPSWORD
        clck    {key-positions = <3 6>; bindings = <&kp CLCK>; layers = <DEF COL>; COMBO;};                     // CAPSLOCK
        cwrd    {key-positions = <13 16>; bindings = <&caps_word>; layers = <DEF COL>; COMBO;};                 // CAPSWORD
        nmwd    {key-positions = <14 15>; bindings = <&num_word>; layers = <DEF COL>; COMBO;};

        // ESC, TAB, DEL and BSPC
        // esc     {key-positions = <2 3>; bindings = <&kp ESC>; layers = <DEF COL NUM NAV>; COMBO;};              // ESC
        tab     {key-positions = <12 13>; bindings = <&kp TAB>; layers = <DEF COL NUM NAV>; COMBO;};            // TAB
        // del     {key-positions = <6 7>; bindings = <&kp DEL>; layers = <DEF COL NUM NAV>; COMBO;};              // DEL
        // bspc    {key-positions = <16 17>; bindings = <&kp BSPC>; layers = <DEF COL NUM NAV>; COMBO;};           // BSPC
        bsdl    {key-positions = <16 17>; bindings = <&bsdl>; layers = <DEF COL NUM NAV>; COMBO;};              // BSDL

        // GRAVE, APOS
        grave   {key-positions = <14 24>; bindings = <&kp GRAVE>; layers = <DEF COL>; COMBO;};                  // `~
        apos    {key-positions = <15 25>; bindings = <&kp APOS>; layers = <DEF COL>; COMBO;};                   // '"

        // NUMERICS
        n1      {key-positions = <0 10>; bindings = <&kp N1>; layers = <DEF COL>; COMBO;};                      // 1
        n2      {key-positions = <1 11>; bindings = <&kp N2>; layers = <DEF COL>; COMBO;};                      // 2
        n3      {key-positions = <2 12>; bindings = <&kp N3>; layers = <DEF COL>; COMBO;};                      // 3
        n4      {key-positions = <3 13>; bindings = <&kp N4>; layers = <DEF COL>; COMBO;};                      // 4
        n5      {key-positions = <4 14>; bindings = <&kp N5>; layers = <DEF COL>; COMBO;};                      // 5
        n6      {key-positions = <5 15>; bindings = <&kp N6>; layers = <DEF COL>; COMBO;};                      // 6
        n7      {key-positions = <6 16>; bindings = <&kp N7>; layers = <DEF COL>; COMBO;};                      // 7
        n8      {key-positions = <7 17>; bindings = <&kp N8>; layers = <DEF COL>; COMBO;};                      // 8
        n9      {key-positions = <8 18>; bindings = <&kp N9>; layers = <DEF COL>; COMBO;};                      // 9
        n0      {key-positions = <9 19>; bindings = <&kp N0>; layers = <DEF COL>; COMBO;};                      // 0

        // SYMBOLS
        s1      {key-positions = <0 10>; bindings = <&kp EXCL>; layers = <NUM>; COMBO;};                        // !
        s2      {key-positions = <1 11>; bindings = <&kp AT>; layers = <NUM>; COMBO;};                          // @
        s3      {key-positions = <2 12>; bindings = <&kp HASH>; layers = <NUM>; COMBO;};                        // #
        s4      {key-positions = <3 13>; bindings = <&kp DLLR>; layers = <NUM>; COMBO;};                        // $
        s5      {key-positions = <4 14>; bindings = <&kp PRCNT>; layers = <NUM>; COMBO;};                       // %
        s6      {key-positions = <5 15>; bindings = <&kp CARET>; layers = <NUM>; COMBO;};                       // ^
        s7      {key-positions = <6 16>; bindings = <&kp AMPS>; layers = <NUM>; COMBO;};                        // &
        s8      {key-positions = <7 17>; bindings = <&kp ASTRK>; layers = <NUM>; COMBO;};                       // *
        // s9      {key-positions = <8 18>; bindings = <&kp N9>; layers = <NUM>; COMBO;};                           // (
        // s10     {key-positions = <9 19>; bindings = <&kp N0>; layers = <NUM>; COMBO;};                           // )
        s11     {key-positions = <10 20>; bindings = <&kp PIPE>; layers = <NUM>; COMBO;};                       // |
        s12     {key-positions = <19 29>; bindings = <&kp QMARK>; layers = <NUM>; COMBO;};                      // ?
        s13     {key-positions = <14 24>; bindings = <&kp TILDE>; layers = <NUM>; COMBO;};                      // ~
        s14     {key-positions = <15 25>; bindings = <&kp DQT>; layers = <NUM>; COMBO;};                        // "

        // PAR, BKT
        lpar    {key-positions = <17 27>; bindings = <&kp LPAR>; layers = <DEF COL NUM>; COMBO;};               // (
        rpar    {key-positions = <18 28>; bindings = <&kp RPAR>; layers = <DEF COL NUM>; COMBO;};               // )
        lbkt    {key-positions = <11 21>; bindings = <&kp LBKT>; layers = <DEF COL>; COMBO;};                   // [{
        rbkt    {key-positions = <12 22>; bindings = <&kp RBKT>; layers = <DEF COL>; COMBO;};                   // ]}
        lbrc    {key-positions = <11 21>; bindings = <&kp LBRC>; layers = <NUM>; COMBO;};                       // {
        rbrc    {key-positions = <12 22>; bindings = <&kp RBRC>; layers = <NUM>; COMBO;};                       // }

        // EQUAL, COLON
        equal   {key-positions = <13 23>; bindings = <&kp EQUAL>; layers = <DEF COL NUM>; COMBO;};              // =
        colon   {key-positions = <16 26>; bindings = <&kp COLON>; layers = <DEF COL NUM>; COMBO;};              // :

        // SLASH, BSLH
        bslh    {key-positions = <10 20>; bindings = <&kp BSLH>; layers = <DEF COL>; LCOMBO;};                  // \|
        slash   {key-positions = <19 29>; bindings = <&kp SLASH>; layers = <DEF COL>; LCOMBO;};                 // /?

        // MINUS, PLUS, DIV and MUL
        plus    {key-positions = <13 14>; bindings = <&kp PLUS>; layers = <DEF COL NUM>; COMBO;};               // +
        mul     {key-positions = <23 24>; bindings = <&kp STAR>; layers = <DEF COL NUM>; COMBO;};                 // *
        minus   {key-positions = <15 16>; bindings = <&kp MINUS>; layers = <DEF COL NUM>; COMBO;};              // -_
        div     {key-positions = <25 26>; bindings = <&kp SLASH>; layers = <DEF COL NUM>; COMBO;};                // /

        // NAV LAYERS COMBOS
        home    {key-positions = <16 26>; bindings = <&kp HOME>; layers = <NAV>; COMBO;};                       // HOME
        end     {key-positions = <18 28>; bindings = <&kp END>; layers = <NAV>; COMBO;};                        // END
        bounce  {key-positions = <15 25>; bindings = <&kp LSC(UP)>; layers = <NAV>; COMBO;};                     // Declaration <-> Implementation

        // PREV/NEXT/DROP BOOKMARKS
        bmrk1   {key-positions = <6 16>; bindings = <&kp LCA(LEFT)>; layers = <NAV>; COMBO;};                   // Bookmark prev (Parnassus)
        bmrk2   {key-positions = <8 18>; bindings = <&kp LCA(RIGHT)>; layers = <NAV>; COMBO;};                  // Bookmark next (Parnassus)
        bmrk3   {key-positions = <7 17>; bindings = <&kp LC(B)>; layers = <NAV>; COMBO;};                       // Bookmark drop (Parnassus)
        bmrk4   {key-positions = <14 24>; bindings = <&kp LS(ESC)>; layers = <NAV>; COMBO;};                    // Bookmark drop (Parnassus) - Jumps between two caret bookmarks


        // UTILS
        comment {key-positions = <19 29>; bindings = <&kp LC(SLASH)>; layers = <NAV>; LCOMBO;};                 // Ctrl + / - przydaje się do komentowania kodu
        // exit    {key-positions = <1 2>; bindings = <&kp LG(ESC)>; layers = <NAV>; COMBO;};                      // EXIT (wyjście z Magnify)
     };

    behaviors {
        // &sn i &nd, łącznie, pozwalają na uzyskanie następującej funkcjonalności:
        // tap: num-word | double-tap: sticky num-layer | hold: num-layer

        // sn: smart_num {
        //     compatible = "zmk,behavior-hold-tap";
        //     #binding-cells = <2>;

        //     flavor = "balanced";
        //     tapping-term-ms = <200>;
        //     quick-tap-ms = <175>;
        //     bindings = <&kp>, <&kp>; // <&mo>, <&nd>;
        // };

        sn: smart_num {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            bindings = <&num_word>, <&kp>;
        };

        nd: num_dance {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&num_word>, <&sl NUM>;  // reverse this for sticky-num on single tap
        };

        // Alt+Tab swapper, requires PR #1366
        sw: swapper {
            compatible = "zmk,behavior-tri-state";
            #binding-cells = <0>;
            bindings = <&kt LALT>, <&kp TAB>, <&kt LALT>;
            // ignored-key-positions = <LT2>;   // tutaj należałoby dodać pozycję klawisza realizującego LS(TAB)
        };

        hl: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 30 31 32 33>;
            hold-trigger-on-release;
        };

        hr: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32 33>;
            hold-trigger-on-release;
        };

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <100>;
            bindings = <&kp>, <&kp>;
        };

        bsdl: bspc_del {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp BSPC>, <&kp DEL>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_RSFT)>;
        };

        zoom_actions: windows_magnifier_actions { // powiększanie i pomniejszanie (Win++ / Win+-)
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LG(EQUAL)>, <&kp LG(MINUS)>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        zoom: windows_magnifier {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            // flavor = "hold-preferred";
            tapping-term-ms = <400>;
            // quick-tap-ms = <200>;
            bindings = <&kp>, <&zoom_actions>;
        };

    };

    macros {
        dm: delphi_macro { // code block folding
            #binding-cells = <1>;
            compatible = "zmk,behavior-macro-one-param";
            bindings =
                <&macro_press &kp LSHFT &kp LCTRL>,
                <&macro_tap &kp K>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_release &kp LSHFT &kp LCTRL>;
        };
    };

    // conditional_layers {
    //     compatible = "zmk,conditional-layers";
    //     tri_layer {
    //         if-layers = <NUM NAV>;
    //         then-layer = <FUN>;
    //     };
    // };
};