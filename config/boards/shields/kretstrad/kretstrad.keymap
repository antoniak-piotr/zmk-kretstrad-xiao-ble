/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define DEF 0           // QWERTY
#define COL 1           // Colemak-DH
#define NUM 2           // liczby
#define NAV 3           // nawigacja
#define FUN 4           // klawisze funkcyjne
#define CONF 5          // konfiguracja (np. Bluetooth)

#define LSHF LSHFT
#define LCTR LCTRL
#define RSHF RSHFT
#define RCTR RCTRL

#define LSG(KEY) LS(LG(KEY))
#define LSA(KEY) LS(LA(KEY))
#define LSC(KEY) LS(LC(KEY))
#define LCA(KEY) LC(LA(KEY))
#define LSCA(KEY) LS(LC(LA(KEY)))

#define SNIP LSG(S)     // wykonuje zrzut ekranu za pomocą narzędzia SNIP (Win+Shift+S)

&mt {
    flavor = "tap-preferred";
    tapping-term-ms = <200>;
    quick-tap-ms = <150>;
    require-prior-idle-ms = <100>;
};

&lt {
    flavor = "tap-preferred";
    tapping-term-ms = <200>;
    quick-tap-ms = <150>;
    require-prior-idle-ms = <100>;
};

&caps_word {
    continue-list = <UNDER N1 N2 N3 N4 N5 N6 N7 N8 N9 N0 BSPC DEL>;
};

/ {
    keymap {
        compatible = "zmk,keymap";

            //  |       0       |       1       |       2       |       3       |       4       |       |       5       |       6       |       7       |       8       |       9       |
       DEF_layer {
            bindings = <
                &lt CONF Q      &kp W           &kp E           &kp R           &kp T                   &kp Y           &kp U           &kp I           &kp O           &kp P
                &hm LSHF A      &kp S           &hm LALT D      &hm LCTR F      &kp G                   &kp H           &hm RCTR J      &hm LALT K      &kp L           &hm RSHF SEMI
                &kp Z           &kp X           &kp C           &kp V           &kp B                   &kp N           &kp M           &kp COMMA       &kp DOT         &kp ENTER
                                                                &mt LWIN ESC    &lt NUM TAB             &lt NAV SPACE   &mt RALT BSPC
            >;
        };

        COL_layer {
            bindings = <
                &lt CONF Q      &kp W           &kp F           &kp P           &kp B                   &kp J           &kp L           &kp U           &kp Y           &kp SEMI
                &hm LSHF A      &kp R           &hm LALT S      &hm LCTR T      &kp G                   &kp M           &hm RCTR N      &hm LALT E      &kp I           &hm RSHF O
                &kp Z           &kp X           &kp C           &kp D           &kp V                   &kp K           &kp H           &kp COMMA       &kp DOT         &kp ENTER
                                                                &mt LWIN ESC    &lt NUM TAB             &lt NAV SPACE   &mt RALT BSPC
            >;
        };

        NUM_layer {
            bindings = <
                &kp EXCL        &kp AT          &kp HASH        &kp DLLR        &kp PRCNT               &kp STAR        &kp CARET       &kp AMPS        &kp PIPE        &kp QMARK
                &hm LSHF N1     &kp N2          &hm LALT N3     &hm LCTR N4     &kp N5                  &kp N6          &hm RCTR N7     &hm LALT N8     &kp N9          &hm RSHF N0
                &kp BSLH        &kp LT          &kp LBKT        &kp LPAR        &kp COLON               &kp EQUAL       &kp RPAR        &kp RBKT        &kp GT          &kp SLASH
                                                                &mt LWIN ESC    &trans                  &lt NAV UNDER   &mt RALT DEL
            >;
        };

        NAV_layer {
            bindings = <
                &none           &none           &none           &kp SNIP        &kp PSCRN               &none           &none           &none           &none           &none
                &hm LSHF LSC(Z) &none           &kp LALT        &kp LCTR        &kp LG(MINUS)           &kp HOME        &kp LEFT        &kp UP          &kp RIGHT       &kp PG_UP
                &kp LC(Z)       &kp LC(X)       &kp LC(C)       &kp LC(V)       &kp LG(EQUAL)           &kp END         &kp LC(LEFT)    &kp DOWN        &kp LC(RIGHT)   &kp PG_DN
                                                                &mt LWIN ESC    &lt NUM TAB             &trans          &kp DEL
            >;
        };

        FUN_layer {
            bindings = <
                &none           &none           &none           &none           &none                   &none           &none           &none           &none           &none
                &hm LSHF F1     &kp F2          &hm LALT F3     &hm LCTR F4     &kp F5                  &kp F6          &hm RCTR F7     &hm LALT F8     &kp F9          &hm RSHF F10
                &none           &none           &none           &none           &kp F11                 &kp F12         &none           &none           &none           &none
                                                                &mt LWIN ESC    &trans                  &trans          &mt RALT BSPC
            >;
        };

        CONF_layer {
            bindings = <
                &trans          &bt BT_SEL 0    &bt BT_SEL 1    &bt BT_SEL 2    &bootloader             &none           &none           &none           &none           &none
                &bt BT_CLR      &bt BT_SEL 3    &bt BT_SEL 4    &bt BT_SEL 5    &sys_reset              &none           &none           &none           &none           &none
                &none           &none           &none           &none           &none                   &none           &none           &none           &none           &none
                                                                &out OUT_TOG    &tog COL                &none           &none
            >;
        };
    };


    /*                KEY POSITIONS
    ╭────────────────────╮ ╭────────────────────╮
    │  0   1   2   3   4 │ │  5   6   7   8   9 │
    │ 10  11  12  13  14 │ │ 15  16  17  18  19 │
    │ 20  21  22  23  24 │ │ 25  26  27  28  29 │
    ╰───────────╮ 30  31 │ │ 32  33 ╭───────────╯
                ╰────────╯ ╰────────╯         */
    #define COMBO timeout-ms = <100>

    combos {
        compatible = "zmk,combos";

        // CAPS-WORD
        caps    {key-positions = <10 19>; bindings = <&caps_word>; layers = <DEF COL>; COMBO;};                 // CAPS WORD

        // // TAB, ESC, BACKSPACE i DELETE
        // tab    {key-positions = <12 13>; bindings = <&kp TAB>; layers = <DEF COL NUM NAV>; COMBO;};                 // TAB
        // bspc   {key-positions = <16 17>; bindings = <&kp BSPC>; layers = <DEF COL NUM NAV>; COMBO;};                // BSPC

        // odwrotny (GRAVE) oraz zwykły (APOS) apostrof oraz tylda i cudzysłów
        tilde   {key-positions = <2 12>; bindings = <&kp TILDE>; layers = <DEF COL NUM>; COMBO;};               // ~
        grave   {key-positions = <3 13>; bindings = <&kp GRAVE>; layers = <DEF COL NUM>; COMBO;};               // `~
        apos    {key-positions = <6 16>; bindings = <&kp APOS>; layers = <DEF COL NUM>; COMBO;};                // '"
        dqt     {key-positions = <7 17>; bindings = <&kp DQT>; layers = <DEF COL NUM>; COMBO;};                 // "

        // +, -, *, /
        div     {key-positions = <14 24>; bindings = <&kp SLASH>; layers = <DEF COL NUM>; COMBO;};              // /
        minus   {key-positions = <4 14>; bindings = <&kp MINUS>; layers = <DEF COL NUM>; COMBO;};               // -_
        plus    {key-positions = <5 15>; bindings = <&kp PLUS>; layers = <DEF COL NUM>; COMBO;};                // +
        mul     {key-positions = <15 25>; bindings = <&kp STAR>; layers = <DEF COL NUM>; COMBO;};               // *

        comment {key-positions = <18 28>; bindings = <&kp LC(SLASH)>; layers = <NAV>; COMBO;};                  // Ctrl + / - przydaje się do komentowania kodu

        // wyjście z Magnify
        exit    {key-positions = <14 24>; bindings = <&kp LG(ESC)>; layers = <NAV>; COMBO;};                    // EXIT
     };

    behaviors {
        // prev: prev_app_or_desktop {
        //     compatible = "zmk,behavior-mod-morph";
        //     label = "PREV_APP_OR_VDESK_OR_CLOSE_VDESK_ON_HOLD";
        //     #binding-cells = <0>;
        //     bindings = <&mt LG(LC(F4)) LG(LC(LEFT))>, <&kp LS(TAB)>;
        //     mods = <(MOD_LALT)>;
        //     keep-mods = <(MOD_LALT)>;
        // };

        // next: next_app_or_desktop {
        //     compatible = "zmk,behavior-mod-morph";
        //     label = "NEXT_APP_OR_VDESK_OR_NEW_VDESK_ON_HOLD";
        //     #binding-cells = <0>;
        //     bindings = <&mt LG(LC(D)) LG(LC(RIGHT))>, <&kp TAB>;
        //     mods = <(MOD_LALT)>;
        //     keep-mods = <(MOD_LALT)>;
        // };

        // zoom_in_out: windows_magnifier {
        //     compatible = "zmk,behavior-mod-morph";
        //     label = "ZOOM_IN_OUT";
        //     #binding-cells = <0>;
        //     bindings = <&kp LG(EQUAL)>, <&kp LG(MINUS)>;
        //     mods = <(MOD_LSFT | MOD_LCTL)>;
        // };

        // zoom: zoom {
        //     compatible = "zmk,behavior-hold-tap";
        //     label = "ZOOM";
        //     #binding-cells = <2>;
        //     flavor = "balanced";
        //     tapping-term-ms = <200>;
        //     quick-tap-ms = <100>;
        //     bindings = <&kp>, <&zoom_in_out>;
        // };

        // lbk: lbkt_lbrc {
        //     compatible = "zmk,behavior-mod-morph";
        //     label = "LEFT_BRACKET_BRACE";
        //     #binding-cells = <0>;
        //     bindings = <&kp LBKT>, <&kp LBRC>;
        //     mods = <(MOD_LCTL)>;
        // };

        // rbk: rbkt_rbrc {
        //     compatible = "zmk,behavior-mod-morph";
        //     label = "RIGHT_BRACKET_BRACE";
        //     #binding-cells = <0>;
        //     bindings = <&kp RBKT>, <&kp RBRC>;
        //     mods = <(MOD_LCTL)>;
        // };

        // lpb: lpar_rbkt {
        //     compatible = "zmk,behavior-mod-morph";
        //     label = "LEFT_PARENTHESIS_BRACKET_BRACE";
        //     #binding-cells = <0>;
        //     bindings = <&kp LPAR>, <&lbk>;
        //     mods = <(MOD_LSFT)>;
        // };

        // rpb: rpar_rbkt {
        //     compatible = "zmk,behavior-mod-morph";
        //     label = "RIGHT_PARENTHESIS_BRACKET_BRACE";
        //     #binding-cells = <0>;
        //     bindings = <&kp RPAR>, <&rbk>;
        //     mods = <(MOD_LSFT)>;
        // };

        // lpb: lpar_lbkt {
        //     compatible = "zmk,behavior-mod-morph";
        //     label = "LEFT_PARENTHESIS_BRACKET";
        //     #binding-cells = <0>;
        //     bindings = <&kp LPAR>, <&kp LBKT>;
        //     mods = <(MOD_LCTL)>;
        // };

        // rpb: rpar_rbkt {
        //     compatible = "zmk,behavior-mod-morph";
        //     label = "RIGHT_PARENTHESIS_BRACKET";
        //     #binding-cells = <0>;
        //     bindings = <&kp RPAR>, <&kp RBKT>;
        //     mods = <(MOD_LCTL)>;
        // };

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <100>;
            bindings = <&kp>, <&kp>;
        };

        // bsdl: bspc_del {
        //     compatible = "zmk,behavior-mod-morph";
        //     label = "BACKSPACE_DELETE";
        //     #binding-cells = <0>;
        //     bindings = <&kp BSPC>, <&kp DEL>;
        //     mods = <(MOD_LSFT)>;
        // };
    };

    macros {
        // dm: delphi_macro {
        //     #binding-cells = <1>;
        //     label = "DELPHI_MACRO";
        //     compatible = "zmk,behavior-macro-one-param";
        //     bindings =
        //         <&macro_press &kp LSHFT &kp LCTRL>,
        //         <&macro_tap &kp K>,
        //         <&macro_param_1to1 &kp MACRO_PLACEHOLDER>,
        //         <&macro_release &kp LSHFT &kp LCTRL>;
        // };

        // dequal: delphi_equal {
        //     #binding-cells = <0>;
        //     label = "DELPHI_EQUAL";
        //     compatible = "zmk,behavior-macro";
        //     bindings = <&macro_tap &kp COLON &kp EQUAL>;
        // };

    };

    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <NUM NAV>;
            then-layer = <FUN>;
        };
    };
};